#!/usr/bin/env node

const path = require('path')
const fs = require('fs')
const cli = require('cac')()
const esbuild = require('esbuild')
const crypto = require('crypto')

const parsed = cli.parse()
const [absWorkingDir, entryPoint] = parsed.args
const entryPointKey = crypto.createHash('sha1').update(entryPoint).digest('base64')

const { resolve } = require('../lib/froxy/esbuild/utils')
const loadStylePlugin = require('../lib/froxy/esbuild/plugins/load_style')
const envPlugin = require('../lib/froxy/esbuild/plugins/env')
const aliasPlugin = require('../lib/froxy/esbuild/plugins/alias')(absWorkingDir)
const cssPlugin = require('../lib/froxy/esbuild/plugins/css')(absWorkingDir)
const imagesPlugin = require('../lib/froxy/esbuild/plugins/images')(absWorkingDir)
const rootPlugin = require('../lib/froxy/esbuild/plugins/root')(absWorkingDir)

const testPlugin = {
  name: 'froxy.test',
  setup(build) {
    build.onResolve({ filter: /.*/ }, args => {
      console.log('onResolve', args)
    })
    build.onLoad({ filter: /.*/ }, args => {
      console.log('onLoad', args)
    })
  }
}

const buildOptions = {
  absWorkingDir,
  entryPoints: [entryPoint],
  bundle: true,
  format: 'esm',
  outdir: 'public/froxy/build',
  outbase: '.',
  logLevel: 'error',
  define: {
    'process.env.NODE_ENV': `"${process.env.NODE_ENV || 'development'}"`,
    'process.env.RAILS_ENV': `"${process.env.RAILS_ENV || 'development'}"`
  },
  metafile: `public/froxy/meta/${entryPointKey}.json`,
  plugins: [aliasPlugin, envPlugin, loadStylePlugin, cssPlugin, imagesPlugin, rootPlugin]
}

esbuild
  .build(buildOptions)
  .catch(error => {
    // console.error(error)
    process.exit(1)
  })
  .then(results => {
    console.log(results)
    // process.stdout.write(results.outputFiles[0].text)
    // process.stdout.write(fs.readFileSync(`${absWorkingDir}/${buildOptions.metafile}`, 'utf8'))
  })
